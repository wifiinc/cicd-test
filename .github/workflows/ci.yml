name: CI

on:
  pull_request:
    branches: [ master ]

permissions:
  pull-requests: write
  contents: read
  checks: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ job.status }}
    steps:
      - uses: actions/checkout@v3

      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y cmake build-essential

      - name: Configure and build
        run: |
          cmake -S . -B build
          cmake --build build

      - name: Create directory for test results
        run: mkdir -p build/test_results

      - name: Run tests
        # Assuming GoogleTest: Set GTEST_OUTPUT env var for ctest to pass down
        # CTest runs tests, and GoogleTest executables will write XML reports
        env:
          GTEST_OUTPUT: xml:test_results/
        run: ctest --test-dir build --output-on-failure

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Unit Test Results
          path: build/**/test_results/*.xml
          reporter: jest-junit
          fail-on-error: 'true'
        
      - name: Get test summary
        run: |
          cat $GITHUB_STEP_SUMMARY
          cp $GITHUB_STEP_SUMMARY ./test-summary.md
        
      - name: Upload test summary artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-summary-artifact
          path: test-summary.md
          retention-days: 1

  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ job.status }}
    steps:
      - uses: actions/checkout@v3

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Run clang-format check
        id: check_lint
        run: |
          clang-format -i $(find src include tests -name '*.cpp' -o -name '*.h')
          git diff > clang_diff.txt
          
          if [ -s clang_diff.txt ]; then
            echo "Formatting issues found."
            exit 1
          else
            echo "Code is properly formatted."
          fi
      
      - name: Upload lint diff artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-diff
          path: clang_diff.txt
          retention-days: 1

  report:
    name: Report Summary
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()
    steps:
      - uses: actions/checkout@v3

      - name: Download lint diff artifact
        uses: actions/download-artifact@v4
        with:
          name: lint-diff
          path: ./

      - name: Download test summary artifact
        uses: actions/download-artifact@v4
        with:
          name: test-summary-artifact
          path: ./
      
      - name: Debug
        run: |
          ls -lah

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const diffContent = fs.readFileSync('clang_diff.txt', 'utf8');
            const testContent = fs.readFileSync('test-summary.md', 'utf8');
            const issue_number = context.issue.number;
            
            const commentBody = `## Code Analysis
            ### Test output

            ${testContent}
            
            ### Linter suggestions

            It looks like some code formatting issues were detected.
            Consistent formatting helps keep the codebase readable and maintainable.

            **Suggested changes:**
            <details><summary>Expand for details</summary>
            \`\`\`diff
            ${diffContent}
            \`\`\`
            </details>
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: commentBody
            });
